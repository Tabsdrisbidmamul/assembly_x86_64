     1                                  extern printf
     2                                  section .data
     3 00000000 4100                      first   db  "A", 0
     4 00000002 4200                      second  db  "B", 0
     5 00000004 4300                      third   db  "C", 0
     6 00000006 4400                      fourth  db  "D", 0
     7 00000008 4500                      fifth   db  "E", 0
     8 0000000A 4600                      sixth   db  "F", 0
     9 0000000C 4700                      seventh db  "G", 0
    10 0000000E 4800                      eighth  db  "H", 0
    11 00000010 4900                      ninth   db  "I", 0
    12 00000012 4A00                      tenth   db  "J", 0
    13 00000014 54686520737472696E-       fmt1    db  "The string is: %s", 10, 0
    13 0000001D 672069733A2025730A-
    13 00000026 00                 
    14                                  section .bss
    15 00000000 <res Bh>                  flist   resb  11 ; len of string + terminating 0
    16                                  section .text
    17                                    global main
    18                                  main:
    19 00000000 55                      push  rbp
    20 00000001 4889E5                  mov   rbp, rsp
    21 00000004 48BF-                     mov   rdi, flist
    21 00000006 [0000000000000000] 
    22 0000000E 48BE-                     mov   rsi, first
    22 00000010 [0000000000000000] 
    23 00000018 48BA-                     mov   rdx, second
    23 0000001A [0200000000000000] 
    24 00000022 48B9-                     mov   rcx, third
    24 00000024 [0400000000000000] 
    25 0000002C 49B8-                     mov   r8, fourth
    25 0000002E [0600000000000000] 
    26 00000036 49B9-                     mov   r9, fifth
    26 00000038 [0800000000000000] 
    27                                  
    28                                  ;  push  0
    29 00000040 68[12000000]              push  tenth ; push other params in reverse order to stack
    30 00000045 68[10000000]              push  ninth
    31 0000004A 68[0E000000]              push  eighth
    32 0000004F 68[0C000000]              push  seventh
    33 00000054 68[0A000000]              push  sixth
    34                                  
    35 00000059 E824000000                call  lfunc
    36                                  
    37 0000005E 48BF-                     mov   rdi, fmt1
    37 00000060 [1400000000000000] 
    38 00000068 48BE-                     mov   rsi, flist ; we move the pointer of flist into rdi, and deref the pointer and place each letter into each byte address
    38 0000006A [0000000000000000] 
    39 00000072 B800000000                mov   rax, 0
    40                                    
    41 00000077 4883E4F0                  and   rsp, 0xfffffffffffffff0
    42 0000007B E8(00000000)              call  printf
    43 00000080 C9                      leave
    44 00000081 C3                      ret
    45                                  
    46                                  ; get all arguments and move each byte into rdi
    47                                  lfunc:
    48 00000082 55                      push  rbp
    49 00000083 4889E5                  mov   rbp, rsp
    50 00000086 4831C0                    xor   rax, rax
    51                                    ; 1-5 args into rdi
    52 00000089 8A06                      mov   al, byte [rsi]
    53 0000008B 8807                      mov   [rdi], al
    54                                  
    55 0000008D 8A02                      mov   al, byte [rdx]
    56 0000008F 884701                    mov   [rdi + 1], al
    57                                  
    58 00000092 8A01                      mov   al, byte [rcx]
    59 00000094 884702                    mov   [rdi + 2], al
    60                                  
    61 00000097 418A00                    mov   al, byte [r8]
    62 0000009A 884703                    mov   [rdi + 3], al
    63                                    
    64 0000009D 418A01                    mov   al, byte [r9]
    65 000000A0 884704                    mov   [rdi + 4], al
    66                                  
    67                                    ; 6-10 args from stack into rbx
    68 000000A3 53                        push  rbx ; save calle - as we're clearing it
    69 000000A4 4831DB                    xor   rbx, rbx
    70 000000A7 488B4510                  mov   rax, qword [rbp + 16] ; 16-byte align, first value is further up in stack (coming from rip + rbp)
    71 000000AB 8A18                      mov   bl, byte [rax]
    72 000000AD 885F05                    mov   [rdi + 5], bl
    73                                  
    74 000000B0 488B4518                  mov   rax, qword [rbp + 24] ; each push to stack is +8
    75 000000B4 8A18                      mov   bl, byte [rax]
    76 000000B6 885F06                    mov   [rdi + 6], bl
    77                                  
    78 000000B9 488B4520                  mov   rax, qword [rbp + 32]
    79 000000BD 8A18                      mov   bl, byte [rax]
    80 000000BF 885F07                    mov   [rdi + 7], bl
    81                                  
    82 000000C2 488B4528                  mov   rax, qword [rbp + 40]
    83 000000C6 8A18                      mov   bl, byte [rax]
    84 000000C8 885F08                    mov   [rdi + 8], bl
    85                                  
    86 000000CB 488B4530                  mov   rax, qword [rbp + 48]
    87 000000CF 8A18                      mov   bl, byte [rax]
    88 000000D1 885F09                    mov   [rdi + 9], bl
    89                                  
    90 000000D4 B300                      mov   bl, 0
    91 000000D6 885F0A                    mov   [rdi + 10], bl
    92                                  
    93 000000D9 5B                      pop   rbx
    94 000000DA 4889EC                  mov   rsp, rbp
    95 000000DD 5D                      pop   rbp
    96 000000DE C3                      ret
    97                                  
