     1                                  extern printf
     2                                  section .data
     3 00000000 874B6B5D54DC2B00            number1 dq  12345678901234567
     4 00000008 6400000000000000            number2 dq  100
     5 00000010 F4FFFFFFFFFFFFFF            neg_num dq  -12
     6 00000018 546865206E756D6265-         fmt     db  "The numbers are %ld and %ld", 10, 0
     6 00000021 72732061726520256C-
     6 0000002A 6420616E6420256C64-
     6 00000033 0A00               
     7 00000035 257320256C640A00            fmtint  db  "%s %ld", 10, 0
     8 0000003D 5468652073756E2069-         sumi    db  "The sun is ", 0
     8 00000046 732000             
     9 00000049 546865206469666665-         difi    db  "The difference is ", 0
     9 00000052 72656E636520697320-
     9 0000005B 00                 
    10 0000005C 4E756D626572203120-         inci    db  "Number 1 incremented: ", 0
    10 00000065 696E6372656D656E74-
    10 0000006E 65643A2000         
    11 00000073 4E756D626572203120-         deci    db  "Number 1 decremented: ", 0
    11 0000007C 64656372656D656E74-
    11 00000085 65643A2000         
    12 0000008A 4E756D626572203120-         sali    db  "Number 1 shift left 2 (x4): ", 0
    12 00000093 7368696674206C6566-
    12 0000009C 74203220287834293A-
    12 000000A5 2000               
    13 000000A7 4E756D626572203120-         sari    db  "Number 1 shift right 2 (/4): ", 0
    13 000000B0 736869667420726967-
    13 000000B9 6874203220282F3429-
    13 000000C2 3A2000             
    14 000000C5 4E756D626572203120-         sariex  db  "Number 1 shift right (/4) with sign extension: ", 0
    14 000000CE 736869667420726967-
    14 000000D7 687420282F34292077-
    14 000000E0 697468207369676E20-
    14 000000E9 657874656E73696F6E-
    14 000000F2 3A2000             
    15 000000F5 5468652070726F6475-         multi   db  "The product is: ", 0
    15 000000FE 63742069733A2000   
    16 00000106 54686520696E746567-         divi    db  "The integer quotient is: ", 0
    16 0000010F 65722071756F746965-
    16 00000118 6E742069733A2000   
    17 00000120 546865206D6F64756C-         remi    db  "The modulo is: ", 0
    17 00000129 6F2069733A2000     
    18                                   section .bss
    19 00000000 ????????????????            resulti resq    1
    20 00000008 ????????????????            modulo  resq    1
    21                                  section .text
    22                                      global main
    23                                  main:
    24 00000000 55                          push    rbp
    25 00000001 4889E5                      mov     rbp, rsp
    26                                  ; displaying numbers
    27 00000004 48BF-                       mov     rdi, fmt
    27 00000006 [1800000000000000] 
    28 0000000E 488B3425[00000000]          mov     rsi, [number1]
    29 00000016 488B1425[08000000]          mov     rdx, [number2]
    30 0000001E B800000000                  mov     rax, 0
    31 00000023 E8(00000000)                call    printf
    32                                  ;-----------------adding-----------------
    33 00000028 488B0425[00000000]          mov     rax, [number1]
    34 00000030 48030425[08000000]          add     rax, [number2]
    35 00000038 48890425[00000000]          mov     [resulti], rax
    36                                      
    37 00000040 48BF-                       mov     rdi, fmtint
    37 00000042 [3500000000000000] 
    38 0000004A 48BE-                       mov     rsi, sumi
    38 0000004C [3D00000000000000] 
    39 00000054 488B1425[00000000]          mov     rdx, [resulti]
    40 0000005C B800000000                  mov     rax, 0
    41 00000061 E8(00000000)                call    printf
    42                                  ;-----------------subtracing-----------------
    43 00000066 488B0425[00000000]          mov     rax, [number1]
    44 0000006E 482B0425[08000000]          sub     rax, [number2]
    45 00000076 48890425[00000000]          mov     [resulti], rax
    46                                      
    47 0000007E 48BF-                       mov     rdi, fmtint
    47 00000080 [3500000000000000] 
    48 00000088 48BE-                       mov     rsi, difi
    48 0000008A [4900000000000000] 
    49 00000092 488B1425[00000000]          mov     rdx, [resulti]
    50 0000009A B800000000                  mov     rax, 0
    51 0000009F E8(00000000)                call    printf
    52                                  ;-----------------incrementing-----------------
    53 000000A4 488B0425[00000000]          mov     rax, [number1]
    54 000000AC 48FFC0                      inc     rax
    55 000000AF 48890425[00000000]          mov     [resulti], rax
    56                                      
    57 000000B7 48BF-                       mov     rdi, fmtint,
    57 000000B9 [3500000000000000] 
    58 000000C1 48BE-                       mov     rsi, inci
    58 000000C3 [5C00000000000000] 
    59 000000CB 488B1425[00000000]          mov     rdx, [resulti]
    60 000000D3 B800000000                  mov     rax, 0
    61 000000D8 E8(00000000)                call    printf
    62                                  ;-----------------decrementing-----------------
    63 000000DD 488B0425[00000000]          mov     rax, [number1]
    64 000000E5 48FFC8                      dec     rax
    65 000000E8 48890425[00000000]          mov     [resulti], rax
    66                                      
    67 000000F0 48BF-                       mov     rdi, fmtint
    67 000000F2 [3500000000000000] 
    68 000000FA 48BE-                       mov     rsi, deci
    68 000000FC [7300000000000000] 
    69 00000104 488B1425[00000000]          mov     rdx, [resulti]
    70 0000010C B800000000                  mov     rax, 0
    71 00000111 E8(00000000)                call    printf
    72                                  ;-----------------shift arithemetic left-----------------
    73 00000116 488B0425[00000000]          mov     rax, [number1]
    74 0000011E 48C1E002                    sal     rax, 2  ; will bit shift to left by 2 (so multiply by 4 -> 2^2 = 4)
    75 00000122 48890425[00000000]          mov     [resulti], rax
    76                                      
    77 0000012A 48BF-                       mov     rdi, fmtint
    77 0000012C [3500000000000000] 
    78 00000134 48BE-                       mov     rsi, sali
    78 00000136 [8A00000000000000] 
    79 0000013E 488B1425[00000000]          mov     rdx, [resulti]
    80 00000146 B800000000                  mov     rax, 0
    81 0000014B E8(00000000)                call    printf
    82                                  ;-----------------shift arithemtic right-----------------
    83 00000150 488B0425[00000000]          mov     rax, [number1]
    84 00000158 48C1F802                    sar     rax, 2  ; will bit shift to right by 2 (so divide by 4 -> 2^2 = 4)
    85 0000015C 48890425[00000000]          mov     [resulti], rax
    86                                      
    87 00000164 48BF-                       mov     rdi, fmtint
    87 00000166 [3500000000000000] 
    88 0000016E 48BE-                       mov     rsi, sari
    88 00000170 [A700000000000000] 
    89 00000178 488B1425[00000000]          mov     rdx, [resulti]
    90 00000180 B800000000                  mov     rax, 0
    91 00000185 E8(00000000)                call    printf
    92                                  ;-----------------shift arithemetic right with sign extension-----------------
    93 0000018A 488B0425[10000000]          mov     rax, [neg_num]
    94 00000192 48C1F802                    sar     rax, 2
    95 00000196 48890425[00000000]          mov     [resulti], rax
    96                                      
    97 0000019E 48BF-                       mov     rdi, fmtint
    97 000001A0 [3500000000000000] 
    98 000001A8 48BE-                       mov     rsi, sariex
    98 000001AA [C500000000000000] 
    99 000001B2 488B1425[00000000]          mov     rdx, [resulti]
   100 000001BA B800000000                  mov     rax, 0
   101 000001BF E8(00000000)                call    printf
   102                                  ;-----------------multiply-----------------
   103 000001C4 488B0425[00000000]          mov     rax, [number1]
   104 000001CC 48F72C25[08000000]          imul    qword [number2]
   105 000001D4 48890425[00000000]          mov     [resulti], rax
   106                                      
   107 000001DC 48BF-                       mov     rdi, fmtint
   107 000001DE [3500000000000000] 
   108 000001E6 48BE-                       mov     rsi, multi
   108 000001E8 [F500000000000000] 
   109 000001F0 488B1425[00000000]          mov     rdx, [resulti]
   110 000001F8 B800000000                  mov     rax, 0
   111 000001FD E8(00000000)                call    printf
   112                                  ;-----------------divide-----------------    
   113 00000202 488B0425[00000000]          mov     rax, [number1]
   114 0000020A BA00000000                  mov     rdx, 0 ; rdx will hold the modulo thus needs a 0 loaded
   115 0000020F 48F73C25[08000000]          idiv    qword [number2]
   116 00000217 48890425[00000000]          mov     [resulti], rax
   117 0000021F 48891425[08000000]          mov     [modulo], rdx
   118                                      
   119 00000227 48BF-                       mov     rdi, fmtint
   119 00000229 [3500000000000000] 
   120 00000231 48BE-                       mov     rsi, divi
   120 00000233 [0601000000000000] 
   121 0000023B 488B1425[00000000]          mov     rdx, [resulti]
   122 00000243 B800000000                  mov     rax, 0
   123 00000248 E8(00000000)                call    printf
   124                                      
   125 0000024D 48BF-                       mov     rdi, fmtint
   125 0000024F [3500000000000000] 
   126 00000257 48BE-                       mov     rsi, remi
   126 00000259 [2001000000000000] 
   127 00000261 488B1425[08000000]          mov     rdx, [modulo]
   128 00000269 B800000000                  mov     rax, 0
   129 0000026E E8(00000000)                call    printf
   130                                  
   131 00000273 4889EC                      mov     rsp, rbp
   132 00000276 5D                          pop     rbp
   133 00000277 C3                          ret
   134                                      
   135                                      
   136                                  
   137                                  
   138                                      
